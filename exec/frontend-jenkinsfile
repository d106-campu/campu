pipeline {

  agent any

  environment {
    HOME = "${env.WORKSPACE}"
    NPM_CONFIG_CACHE = "${WORKSPACE}/.npm"
    CI = false

    REGISTRY_URL = credentials('docker_registry_url')
    REGISTRY_AUTH = credentials('docker_registry_id_pw')

    FRONTEND_URL = credentials('frontend_url')

    GIT_MESSAGE = "${sh(returnStdout: true, script: 'git show -s --pretty="* Commit %h by %cn <%ce>%n* Title: %s%n* Date: %cI"')}"

    MM_CHANNEL = credentials('mattermost_channel')
    MM_URL = credentials('mattermost_url')
  }

  tools {
    nodejs 'NodeJS 20.11.0'
  }

  stages {
    stage('Build Frontend') {
      steps {
        script {
          withCredentials([file(credentialsId: 'frontend_env', variable: 'PROD_ENV')]) {
            sh """
              cd exec/; \
              chmod +x frontend-project-setup.sh; \
              ./frontend-project-setup.sh
              """
            sh """
              cd exec/; \
              chmod +x frontend-project-build.sh; \
              ./frontend-project-build.sh
              """
          }
        }
      }
    }

    stage('Build and Push Images') {
      steps {
        script {
          sh """
            cd exec/; \
            chmod +x frontend-docker-build-push.sh; \
            ./frontend-docker-build-push.sh ${env.REGISTRY_URL} ${env.REGISTRY_AUTH_USR} ${env.REGISTRY_AUTH_PSW} ${env.GIT_COMMIT}
            """
        }
      }
    }

    stage('Copy .env to Deploy Directory') {
      steps {
        script {
          withCredentials([file(credentialsId: 'frontend_docker_compose_env', variable: 'DC_ENV')]) {
            sh """
              cd exec/; \
              chmod +x frontend-copy-docker-compose-env.sh; \
              ./frontend-copy-docker-compose-env.sh
              """
          }
        }
      }
    }

    stage('Deploy Frontend') {
      steps([$class: 'BapSshPromotionPublisherPlugin']) {
        script {
          sshPublisher(
            continueOnError: false,
            failOnError: true,
            publishers: [
              sshPublisherDesc(
                configName: 'application', 
                verbose: true,
                transfers: [
                  sshTransfer(
                    sourceFiles: 'exec/frontend-deploy/**',
                    removePrefix: 'exec/frontend-deploy/',
                    remoteDirectory: '/jenkins/deploy/frontend',
                    execCommand: """
                      cd /home/jenkins/deploy/frontend; \
                      chmod 755 *.sh; \
                      ./frontend-stop.sh; \
                      ./frontend-start.sh ${env.REGISTRY_URL} ${env.REGISTRY_AUTH_USR} ${env.REGISTRY_AUTH_PSW} ${env.GIT_COMMIT}
                      """
                  )
                ]
              )
            ]
          )
        }
      }
    }

    // stage('Health Check Frontend') {
    //   steps {
    //     sh 'sleep 20'
    //     script {
    //       def HEALTH = sh(returnStdout: true, script: "curl -s -o /dev/null -w '%{http_code}' ${env.FRONTEND_URL}").trim()

    //       if (HEALTH == "200") {
    //         echo "frontend success"
    //       } else {
    //         error "frontend fail"
    //       }
    //     }
    //   }
    // }
  }

  // post {
  //   success {
  //     script {
  //       mattermostSend(
  //         color: 'good',
  //         message: "[FE] Deploy Success: ${env.BUILD_URL}\n${env.GIT_MESSAGE}",
  //         endpoint: "${env.MM_URL}",
  //         channel: "${env.MM_CHANNEL}",
  //       )
  //     }
  //   }
  
  //   failure {
  //     script {
  //       mattermostSend(
  //         color: 'danger',
  //         message: "[FE] Deploy Fail: ${env.BUILD_URL}\n${env.GIT_MESSAGE}",
  //         endpoint: "${env.MM_URL}",
  //         channel: "${env.MM_CHANNEL}",
  //       )
  //     }
  //   }
  // }

}